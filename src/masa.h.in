// -*-c++-*-
//
//-----------------------------------------------------------------------bl-
//--------------------------------------------------------------------------
//
// MASA - Manufactured Analytical Solutions Abstraction Library
//
// Copyright (C) 2010 The PECOS Development Team
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the Version 2.1 GNU Lesser General
// Public License as published by the Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc. 51 Franklin Street, Fifth Floor,
// Boston, MA  02110-1301  USA
//
//-----------------------------------------------------------------------el-
//
// masa.h: public functions (C/C++) designed to be exposed in MASA
//
// $Id$
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------

#ifndef MASA_H_
#define MASA_H_

//
// Library version/build info
//

#define MASA_MAJOR_VERSION  @GENERIC_MAJOR_VERSION@
#define MASA_MINOR_VERSION  @GENERIC_MINOR_VERSION@
#define MASA_MICRO_VERSION  @GENERIC_MICRO_VERSION@

#define MASA_BUILD_USER     "@BUILD_USER@"
#define MASA_BUILD_ARCH     "@BUILD_ARCH@"
#define MASA_BUILD_HOST     "@BUILD_HOST@"
#define MASA_BUILD_DATE     "@BUILD_DATE@"
#define MASA_BUILD_VERSION  "@BUILD_VERSION@"

#define MASA_LIB_VERSION    "@VERSION@"
#define MASA_LIB_RELEASE    "@BUILD_DEVSTATUS@"

#define MASA_CXX            "@CXX@"
#define MASA_CXXFLAGS       "@CXXFLAGS@"

#define MASA_FC            "@FC@"
#define MASA_FCFLAGS       "@FCFLAGS@"


// This header file contains the public functions designed to be exposed in MASA
// What follows is the masa.h doxygen documentation headers

/*! \file masa.h
\brief MASA header file containing all public C/C++ API

MASA.h is a header file that contains all the public objects and member functions for the C/C++ interfaces. 
To use, be sure to #include <masa.h> in any C or C++ programs calling MASA routines. In addition, all functions are 
encapsulated in a MASA namespace, and thus C++ routines require 'using namespace MASA' for access.

Several Simple examples for using these functions are provided in the examples section. 
Functions which have an integer return value return "0" upon success.

*/

/*! \fn int masa_init(string unique_name, string mms)
  \brief Initialize a MASA manufactured solution class
  \param unique_name This is a string that provides a unique identity for the initialized manufactured class, e.g. "bob"
  \param mms This is the manufactured class to be initialized, e.g. "euler_1d"
*/

#ifdef __cplusplus

#include <string>

namespace MASA
{

  // --------------------------------
  // new masa api function
  // --------------------------------
  template <typename Scalar>
  int masa_init      (std::string, std::string);

  template <typename Scalar>
  int masa_select_mms(std::string);

  template <typename Scalar>
  int masa_list_mms  ();

  // --------------------------------
  // interact with mms variables
  // --------------------------------

  template <typename Scalar>
  int    masa_init_param();

  template <typename Scalar>
  void   masa_set_param(std::string,Scalar);

  template <typename Scalar>
  Scalar masa_get_param(std::string);

  // --------------------------------
  // source term(s) -- 1D
  // --------------------------------

  template <typename Scalar>
  Scalar masa_eval_t_source  (Scalar);        // x

  template <typename Scalar>
  Scalar masa_eval_t_source  (Scalar,Scalar); // x,t

  template <typename Scalar>
  Scalar masa_eval_u_source  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_v_source  (Scalar);        // for SA model

  template <typename Scalar>
  Scalar masa_eval_w_source  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_e_source  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_rho_source(Scalar);

  template <typename Scalar>
  Scalar masa_eval_rho_u_source(Scalar,Scalar); // 1d sod: x,t


  template <typename Scalar>
  Scalar masa_eval_t_an      (Scalar);        // x

  template <typename Scalar>
  Scalar masa_eval_t_an      (Scalar,Scalar); // x,t

  template <typename Scalar>
  Scalar masa_eval_u_an      (Scalar);

  template <typename Scalar>
  Scalar masa_eval_v_an      (Scalar);        // for SA model

  template <typename Scalar>
  Scalar masa_eval_w_an      (Scalar);

  template <typename Scalar>
  Scalar masa_eval_p_an      (Scalar);

  template <typename Scalar>
  Scalar masa_eval_rho_an    (Scalar);

  // --------------------------------
  // source term(s) -- 2D
  // --------------------------------

  template <typename Scalar>
  Scalar masa_eval_t_source  (Scalar,Scalar,Scalar); //x,y,t

  template <typename Scalar>
  Scalar masa_eval_u_source  (Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_v_source  (Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_w_source  (Scalar,Scalar); // for axisymmetric

  template <typename Scalar>
  Scalar masa_eval_e_source  (Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_rho_source(Scalar,Scalar);


  template <typename Scalar>
  Scalar masa_eval_t_an      (Scalar,Scalar,Scalar); //x,y,t

  template <typename Scalar>
  Scalar masa_eval_u_an      (Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_v_an      (Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_w_an      (Scalar,Scalar); // for axisymmetric

  template <typename Scalar>
  Scalar masa_eval_p_an      (Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_rho_an    (Scalar,Scalar);

  // --------------------------------
  // source term(s) -- 3D
  // --------------------------------

  template <typename Scalar>
  Scalar masa_eval_t_source  (Scalar,Scalar,Scalar,Scalar); // x,y,z,t

  template <typename Scalar>
  Scalar masa_eval_u_source  (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_v_source  (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_w_source  (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_e_source  (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_rho_source(Scalar,Scalar,Scalar);
  

  template <typename Scalar>
  Scalar masa_eval_t_an      (Scalar,Scalar,Scalar,Scalar); // x,y,z,t

  template <typename Scalar>
  Scalar masa_eval_u_an      (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_v_an      (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_w_an      (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_p_an      (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_rho_an    (Scalar,Scalar,Scalar);

  // --------------------------------
  // gradient of analytical solutions
  // --------------------------------

  template <typename Scalar>
  Scalar masa_eval_1d_grad_u  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_2d_grad_u  (Scalar,Scalar,int);

  template <typename Scalar>
  Scalar masa_eval_3d_grad_u  (Scalar,Scalar,Scalar,int);


  template <typename Scalar>
  Scalar masa_eval_1d_grad_v  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_2d_grad_v  (Scalar,Scalar,int);

  template <typename Scalar>
  Scalar masa_eval_3d_grad_v  (Scalar,Scalar,Scalar,int);


  template <typename Scalar>
  Scalar masa_eval_1d_grad_w  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_2d_grad_w  (Scalar,Scalar,int);

  template <typename Scalar>
  Scalar masa_eval_3d_grad_w  (Scalar,Scalar,Scalar,int);


  template <typename Scalar>
  Scalar masa_eval_1d_grad_p  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_2d_grad_p  (Scalar,Scalar,int);

  template <typename Scalar>
  Scalar masa_eval_3d_grad_p  (Scalar,Scalar,Scalar,int);


  template <typename Scalar>
  Scalar masa_eval_1d_grad_rho(Scalar);

  template <typename Scalar>
  Scalar masa_eval_2d_grad_rho(Scalar,Scalar,int);

  template <typename Scalar>
  Scalar masa_eval_3d_grad_rho(Scalar,Scalar,Scalar,int);

  // --------------------------------
  // internal masa functions user might want to call
  // --------------------------------
  void masa_exit(int);                             // calls exit() but with exception handling
  int masa_map (std::string*);
  int masa_map2(std::string, std::string);

  template <typename Scalar>
  int masa_test_poly();                            // test poly -- expose for reg test

  // --------------------------------
  // old masa core functions (to be called by user)
  // --------------------------------

  template <typename Scalar>
  int masa_getid(void**,std::string);

  template <typename Scalar>
  int masa_printid();

  template <typename Scalar>
  int masa_display_param();

  template <typename Scalar>
  int masa_get_name(std::string*);

  template <typename Scalar>
  int masa_get_dimension(int*);

  template <typename Scalar>
  int masa_sanity_check();

  // --------------------
  // Versioning routines
  // --------------------
  int masa_version_stdout();
  int masa_get_numeric_version();
  
} //end MASA namespace

#endif // __cplusplus
#endif // MASA_H_


//--------------------------------------------------------------------------
// 
//
// cmasa.h: contains the public C-interface functions in MASA
//
//
//--------------------------------------------------------------------------

#ifdef __cplusplus
extern "C" {
#endif
  
  // --------------------------------
  // new masa api function
  // --------------------------------
  extern int cmasa_init      (const char*, const char*);
  extern int cmasa_select_mms(const char*);
  extern int cmasa_list_mms  ();

  // --------------------------------
  // interact with mms variables
  // --------------------------------
  extern int    cmasa_init_param();
  extern void   cmasa_set_param(const char*,double);
  extern double cmasa_get_param(const char*);

  // --------------------------------
  // source term(s) -- 1D
  // --------------------------------
  extern double cmasa_eval_1d_t_source  (double);
  extern double cmasa_eval_1d_u_source  (double);
  extern double cmasa_eval_1d_e_source  (double);
  extern double cmasa_eval_1d_rho_source(double);

  extern double cmasa_eval_1d_t_an      (double);
  extern double cmasa_eval_1d_u_an      (double);
  extern double cmasa_eval_1d_p_an      (double);
  extern double cmasa_eval_1d_rho_an    (double);

  // --------------------------------
  // source term(s) -- 2D
  // --------------------------------

  extern double cmasa_eval_2d_t_source  (double,double);
  extern double cmasa_eval_2d_u_source  (double,double);
  extern double cmasa_eval_2d_v_source  (double,double);
  extern double cmasa_eval_2d_e_source  (double,double);
  extern double cmasa_eval_2d_rho_source(double,double);

  extern double cmasa_eval_2d_t_an      (double,double);
  extern double cmasa_eval_2d_u_an      (double,double);
  extern double cmasa_eval_2d_v_an      (double,double);
  extern double cmasa_eval_2d_p_an      (double,double);
  extern double cmasa_eval_2d_rho_an    (double,double);

  // --------------------------------
  // source term(s) -- 3D
  // --------------------------------

  extern double cmasa_eval_3d_t_source  (double,double,double);
  extern double cmasa_eval_3d_u_source  (double,double,double);
  extern double cmasa_eval_3d_v_source  (double,double,double);
  extern double cmasa_eval_3d_w_source  (double,double,double);
  extern double cmasa_eval_3d_e_source  (double,double,double);
  extern double cmasa_eval_3d_rho_source(double,double,double);

  extern double cmasa_eval_3d_t_an      (double,double,double);
  extern double cmasa_eval_3d_u_an      (double,double,double);
  extern double cmasa_eval_3d_v_an      (double,double,double);
  extern double cmasa_eval_3d_w_an      (double,double,double);
  extern double cmasa_eval_3d_p_an      (double,double,double);
  extern double cmasa_eval_3d_rho_an    (double,double,double);

  // --------------------------------
  // gradient of analytical solution
  // --------------------------------
  extern double cmasa_eval_1d_grad(int,double);
  extern double cmasa_eval_2d_grad(int,double,double);
  extern double cmasa_eval_3d_grad(int,double,double,double);

  // --------------------------------
  // old masa core functions (to be called by user)
  // --------------------------------
  
  extern int cmasa_get_name(const char*);
  extern int cmasa_get_dimension(int*);
  extern int cmasa_display_param();
  extern int cmasa_sanity_check();

#ifdef __cplusplus
}
#endif

