// -*-c++-*-
//
//-----------------------------------------------------------------------bl-
//--------------------------------------------------------------------------
//
// MASA - Manufactured Analytical Solutions Abstraction Library
//
// Copyright (C) 2010 The PECOS Development Team
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the Version 2.1 GNU Lesser General
// Public License as published by the Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc. 51 Franklin Street, Fifth Floor,
// Boston, MA  02110-1301  USA
//
//-----------------------------------------------------------------------el-
//
// masa.h: public functions (C/C++) designed to be exposed in MASA
//
// $Id$
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------

#ifndef MASA_H_
#define MASA_H_

//
// Library version/build info
//

/// \cond

#define MASA_MAJOR_VERSION  0
#define MASA_MINOR_VERSION  30
#define MASA_MICRO_VERSION  0

#define MASA_BUILD_USER     "nick"
#define MASA_BUILD_ARCH     "x86_64-unknown-linux-gnu"
#define MASA_BUILD_HOST     "magus"
#define MASA_BUILD_DATE     "2011-02-24 18:47"
#define MASA_BUILD_VERSION  "18049:18051"

#define MASA_LIB_VERSION    "0.30"
#define MASA_LIB_RELEASE    "Development Build"

#define MASA_CXX            "g++"
#define MASA_CXXFLAGS       "-O0 -fno-unsafe-math-optimizations"

#define MASA_FC            "gfortran"
#define MASA_FCFLAGS       "-O0 -fno-unsafe-math-optimizations"

/// \endcond

/** \page apiC C/C++ Library Interface                                        
 *                                                                            
 * This section outlines the available MASA functions for C/C++.  To          
 * use, make sure to \#include <masa.h> within your source code               
 * files. Several simple examples using these functions are provided          
 * in the examples section.  
 *
 * \section init Initialization Routines
 */


// This header file contains the public functions designed to be exposed in MASA
// What follows is the masa.h doxygen documentation headers

/** \file
 * MASA header file containing all public C/C++ API
 * 
 * MASA.h is a header file that contains all the public objects and member functions for the C/C++ interfaces. 
 * To use, be sure to #include <masa.h> in any C or C++ programs calling MASA routines. In addition, all functions are 
 * encapsulated in a MASA namespace, and thus C++ routines require 'using namespace MASA' for access.
 * 
 * Several simple examples for using these functions are provided in the examples section. 
 * Functions which have an integer return value return "0" upon success.
 * 
 */

/*! \fn int masa_init(string unique_name, string mms)
  \brief Initialize a MASA manufactured solution class
  \param unique_name This is a string that provides a unique identity for the initialized manufactured class, e.g. "nick"
  \param mms This is the manufactured class to be initialized, e.g. "euler_1d"
*/

#ifdef __cplusplus

#include <string>

namespace MASA
{

  // -------------------------------------
  /// \name Problem Definition Routines 
  // -------------------------------------


  /**
   * masa_init: 
   * 
   * masa_init initalizes a masa manufactured solution class.
   * 
   * This routine takes two arguments, both strings of characters. 
   * The first character string is a handle for the newly initalized 
   * class. ("nick")
   * 
   * The second character string is the unique masa identifier string
   * for a particular masa class. ("euler_1d")
   * 
   */
  template <typename Scalar>
  int masa_init      (std::string, std::string);

  template <typename Scalar>
  int masa_select_mms(std::string);

  template <typename Scalar>
  int masa_list_mms  ();

  template <typename Scalar>
  int masa_purge_default_param();

  template <typename Scalar>
  Scalar pass_func    (Scalar (*)(Scalar),Scalar);

  // --------------------------------
  // interact with mms variables
  // --------------------------------

  template <typename Scalar>
  int    masa_init_param();

  template <typename Scalar>
  void   masa_set_param(std::string,Scalar);

  template <typename Scalar>
  Scalar masa_get_param(std::string);

  // --------------------------------
  // source term(s) -- 1D
  // --------------------------------

  template <typename Scalar>
  Scalar masa_eval_source_t  (Scalar);        // x

  template <typename Scalar>
  Scalar masa_eval_source_t  (Scalar,Scalar); // x,t

  template <typename Scalar>
  Scalar masa_eval_source_u  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_v  (Scalar);        // for SA model

  template <typename Scalar>
  Scalar masa_eval_source_w  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_e  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho(Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho_u(Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho_v(Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho_w(Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho_N(Scalar,Scalar (*)(Scalar));

  template <typename Scalar>
  Scalar masa_eval_source_rho_N2(Scalar,Scalar (*)(Scalar));

  template <typename Scalar>
  Scalar masa_eval_source_rho_e(Scalar);

  // --------------------------------
  // manufactured analytical solution  -- 1D
  // --------------------------------

  template <typename Scalar>
  Scalar masa_eval_exact_t      (Scalar);        // x

  template <typename Scalar>
  Scalar masa_eval_exact_t      (Scalar,Scalar); // x,t

  template <typename Scalar>
  Scalar masa_eval_exact_u      (Scalar);

  template <typename Scalar>
  Scalar masa_eval_exact_v      (Scalar);        // for SA model

  template <typename Scalar>
  Scalar masa_eval_exact_w      (Scalar);

  template <typename Scalar>
  Scalar masa_eval_exact_p      (Scalar);

  template <typename Scalar>
  Scalar masa_eval_exact_rho    (Scalar);

  template <typename Scalar>
  Scalar masa_eval_exact_rho_N  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_exact_rho_N2  (Scalar);

  // --------------------------------
  // source term(s) -- 2D
  // --------------------------------

  template <typename Scalar>
  Scalar masa_eval_source_t  (Scalar,Scalar,Scalar); //x,y,t

  template <typename Scalar>
  Scalar masa_eval_source_u  (Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_v  (Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_w  (Scalar,Scalar); // for axisymmetric

  template <typename Scalar>
  Scalar masa_eval_source_e  (Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho(Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho_u(Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho_v(Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho_w(Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho_e(Scalar,Scalar);

  // --------------------------------
  // manufactured analytical solution  -- 2D
  // --------------------------------

  template <typename Scalar>
  Scalar masa_eval_exact_t      (Scalar,Scalar,Scalar); //x,y,t

  template <typename Scalar>
  Scalar masa_eval_exact_u      (Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_exact_v      (Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_exact_w      (Scalar,Scalar); // for axisymmetric

  template <typename Scalar>
  Scalar masa_eval_exact_p      (Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_exact_rho    (Scalar,Scalar);

  // --------------------------------
  // source term(s) -- 3D
  // --------------------------------

  template <typename Scalar>
  Scalar masa_eval_source_t  (Scalar,Scalar,Scalar,Scalar); // x,y,z,t

  template <typename Scalar>
  Scalar masa_eval_source_u  (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_v  (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_w  (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_e  (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho(Scalar,Scalar,Scalar); 

  template <typename Scalar>
  Scalar masa_eval_source_rho_u(Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho_v(Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho_w(Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_rho_e(Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_source_nu   (Scalar,Scalar,Scalar);

  // --------------------------------
  // manufactured analytical solution  -- 3D
  // --------------------------------

  template <typename Scalar>
  Scalar masa_eval_exact_t      (Scalar,Scalar,Scalar,Scalar); // x,y,z,t

  template <typename Scalar>
  Scalar masa_eval_exact_u      (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_exact_v      (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_exact_w      (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_exact_p      (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_exact_rho    (Scalar,Scalar,Scalar);

  template <typename Scalar>
  Scalar masa_eval_exact_nu     (Scalar,Scalar,Scalar);

  // --------------------------------
  // gradient of analytical solutions
  // --------------------------------

  template <typename Scalar>
  Scalar masa_eval_grad_u  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_grad_u  (Scalar,Scalar,int);

  template <typename Scalar>
  Scalar masa_eval_grad_u  (Scalar,Scalar,Scalar,int);


  template <typename Scalar>
  Scalar masa_eval_grad_v  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_grad_v  (Scalar,Scalar,int);

  template <typename Scalar>
  Scalar masa_eval_grad_v  (Scalar,Scalar,Scalar,int);


  template <typename Scalar>
  Scalar masa_eval_grad_w  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_grad_w  (Scalar,Scalar,int);

  template <typename Scalar>
  Scalar masa_eval_grad_w  (Scalar,Scalar,Scalar,int);


  template <typename Scalar>
  Scalar masa_eval_grad_p  (Scalar);

  template <typename Scalar>
  Scalar masa_eval_grad_p  (Scalar,Scalar,int);

  template <typename Scalar>
  Scalar masa_eval_grad_p  (Scalar,Scalar,Scalar,int);


  template <typename Scalar>
  Scalar masa_eval_grad_rho(Scalar);

  template <typename Scalar>
  Scalar masa_eval_grad_rho(Scalar,Scalar,int);

  template <typename Scalar>
  Scalar masa_eval_grad_rho(Scalar,Scalar,Scalar,int);

  // --------------------------------
  // internal masa functions user might want to call
  // --------------------------------
  void masa_exit(int);                             // calls exit() but with exception handling
  int masa_map (std::string*);
  int masa_map2(std::string, std::string);

  template <typename Scalar>
  int masa_test_poly();

  // --------------------------------
  // old masa core functions (to be called by user)
  // --------------------------------

  template <typename Scalar>
  int masa_getid(void**,std::string);

  template <typename Scalar>
  int masa_printid();

  template <typename Scalar>
  int masa_display_param();

  template <typename Scalar>
  int masa_get_name(std::string*);

  template <typename Scalar>
  int masa_get_dimension(int*);

  template <typename Scalar>
  int masa_sanity_check();

  // --------------------
  // Versioning routines
  // --------------------
  int masa_version_stdout();
  int masa_get_numeric_version();
  
} //end MASA namespace

#endif // __cplusplus
#endif // MASA_H_


//--------------------------------------------------------------------------
// 
//
// masa.h: contains the public C-interface functions in MASA
//
//
//--------------------------------------------------------------------------

#ifdef __cplusplus
extern "C" {
#endif
  
  // --------------------------------
  // new masa api function
  // --------------------------------

  /**
   *  masa_init: 
   * 
   * masa_init initalizes a masa manufactured solution class.
   * 
   * This routine takes two arguments, both strings of characters. 
   * The first character string is a handle for the newly initalized 
   * class. ("nick")
   * 
   * The second character string is the unique masa identifier string
   * for a particular masa class. ("euler_1d")
   * 
   * The routine returns an integer 0 for success. It will throw an 
   * exception and return 1 if no manufactured solutions of the 2nd
   * argument exist. 
   *
   */
  extern int masa_init      (const char*, const char*);

  /**
   *  masa_init: 
   * 
   * This function sets all masa parameters to uninitalized
   *
   */
  extern int masa_purge_default_param();

  /**
   * masa_select_mms selects an already initalized 
   * manufactured solution class.
   *
   * Thus, if the user had created two manufactured classes (say, nick and bob)
   * using masa_init, he could switch between them by passing the 
   * handle to this routine. 
   * 
   * ex. masa_select_mms("nick")
   * 
   * Subroutine returns integer 0 for success.
   */
  extern int masa_select_mms(const char*);

  /**
   * masa_list_mms will display (to stdout) the number of 
   * user initalized solutions. 
   * 
   * In addition, it will then display each solutions unique handle and 
   * full manufactured class name
   *
   * Subroutine returns integer 0 for success.
   */
  extern int masa_list_mms  ();

  // --------------------------------
  // interact with mms variables
  // --------------------------------

  /**
   * masa_init_param is a subroutine that will initalize
   * all the registered variables to selected defaults
   * for the currently selected manufactured solution class. 
   *
   * Subroutine returns integer 0 for success. A return value of n indicates 
   * n failures within init_param, generally from calling set_var()
   * with incorrect arguments.
   *
   */
  extern int    masa_init_param();

  /**
   * masa_set_param is a subroutine that will set 
   * a particular registered variables inside 
   * the currently selected manufactured solution class. 
   *
   * This routine takes two arguments: a character string for
   * the particular variable to be set, and a double precision
   * number to use as the new value of the variable.
   * 
   * This routine can be called multiple times, with subsequent
   * calls overwriting the previously held variable value. 
   */
  extern void   masa_set_param(const char*,double);

  /**
   * masa_get_param is a subroutine that will return
   * a particular registered variables inside 
   * the currently selected manufactured solution class. 
   *
   * This routine takes one argument: a character string for
   * the particular variable value to be returned.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_get_param(const char*);

  //  --------------------------------
  /// \name 1D Source Terms
  //  --------------------------------



  /**
   * masa_eval_1d_source_t is a subroutine that will return
   * the value of the source term for the temperature of the currently selected
   * 1 dimensional masa function 
   *
   * This subroutine takes as input a double precision number
   * which specifies the current x location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_1d_source_t  (double);

  /**
   * masa_eval_1d_source_u is a subroutine that will return
   * the value of the source term for the u component of velocity
   * of the currently selected
   * one dimensional masa function 
   *
   * This subroutine takes as input a double precision number
   * which specifies the current x location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_1d_source_u  (double);

  /**
   * masa_eval_1d_source_e is a subroutine that will return
   * the value of the source term for the energy
   * of the currently selected
   * one dimensional masa function 
   *
   * This subroutine takes as input a double precision number
   * which specifies the current x location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_1d_source_e  (double);

  /**
   * masa_eval_1d_source_rho is a subroutine that will return
   * the value of the source term for the density
   * of the currently selected
   * one dimensional masa function 
   *
   * This subroutine takes as input a double precision number
   * which specifies the current x location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_1d_source_rho(double);
  extern double masa_eval_1d_source_rho_u (double);
  extern double masa_eval_1d_source_rho_e (double);
  extern double masa_eval_1d_source_rho_N (double,double (*)(double));
  extern double masa_eval_1d_source_rho_N2(double,double (*)(double));

  /**
   * masa_eval_1d_exact_t is a subroutine that will return
   * the value of the analytical term for the temperature
   * of the currently selected one dimensional masa function.
   *
   * This subroutine takes as input a single double precision number
   * which specifies the current x location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_1d_exact_t      (double);

  /**
   * masa_eval_1d_exact_u is a subroutine that will return
   * the value of the analytical term for the u component of velocity
   * of the currently selected one dimensional masa function.
   *
   * This subroutine takes as input a single double precision number
   * which specifies the current x location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_1d_exact_u      (double);

  /**
   * masa_eval_1d_exact_p is a subroutine that will return
   * the value of the analytical term for the pressure
   * of the currently selected one dimensional masa function.
   *
   * This subroutine takes as input a single double precision number
   * which specifies the current x location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_1d_exact_p      (double);

  /**
   * masa_eval_1d_exact_rho is a subroutine that will return
   * the value of the analytical term for the u component of velocity
   * of the currently selected one dimensional masa function.
   *
   * This subroutine takes as input a single double precision number
   * which specifies the current x location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_1d_exact_rho      (double);
  extern double masa_eval_1d_exact_rho_N    (double);
  extern double masa_eval_1d_exact_rho_N2   (double);

  // --------------------------------
  /// \name 2D Source Terms
  // --------------------------------

  /**
   * masa_eval_2d_source_t is a subroutine that will return
   * the value of the source term for the temperature of the currently selected
   * 2 dimensional masa function 
   *
   * This subroutine takes as input two double precision numbers
   * which specifies the current x and y locations of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_2d_source_t  (double x,double y);

  /**
   * masa_eval_2d_source_u is a subroutine that will return
   * the value of the source term for the u component of velocity
   * for the currently selected two dimensional masa function.
   *
   * This subroutine takes as input two double precision numbers
   * which specifies the current x and y location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_2d_source_u  (double,double);

  /**
   * masa_eval_2d_source_v is a subroutine that will return
   * the value of the source term for the v component of velocity
   * for the currently selected two dimensional masa function.
   *
   * This subroutine takes as input two double precision numbers
   * which specifies the current x and y location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_2d_source_v  (double,double);

  /**
   * masa_eval_2d_source_e is a subroutine that will return
   * the value of the source term for the energy
   * of the currently selected two dimensional masa function.
   *
   * This subroutine takes as input two double precision numbers
   * which specifies the current x and y location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_2d_source_e  (double,double);

  /**
   * masa_eval_2d_source_rho is a subroutine that will return
   * the value of the source term for the density
   * of the currently selected two dimensional masa function.
   *
   * This subroutine takes as input two double precision numbers
   * which specifies the current x and y location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_2d_source_rho(double,double);
  extern double masa_eval_2d_source_rho_u(double,double);
  extern double masa_eval_2d_source_rho_v(double,double);
  extern double masa_eval_2d_source_rho_w(double,double);
  extern double masa_eval_2d_source_rho_e(double,double);

  /**
   * masa_eval_2d_exact_t is a subroutine that will return
   * the value of the analytical term for the temperature
   * of the currently selected two dimensional masa function.
   *
   * This subroutine takes as input two double precision numbers
   * which specifies the current x and y location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_2d_exact_t      (double,double);

  /**
   * masa_eval_2d_exact_u is a subroutine that will return
   * the value of the analytical term for the u component of velocity
   * of the currently selected two dimensional masa function.
   *
   * This subroutine takes as input two double precision numbers
   * which specifies the current x and y location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_2d_exact_u      (double,double);

  /**
   * masa_eval_2d_exact_v is a subroutine that will return
   * the value of the analytical term for the v component of velocity
   * of the currently selected two dimensional masa function.
   *
   * This subroutine takes as input two double precision numbers
   * which specifies the current x and y location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_2d_exact_v      (double,double);

  /**
   * masa_eval_2d_exact_p is a subroutine that will return
   * the value of the analytical term for the pressure
   * of the currently selected two dimensional masa function.
   *
   * This subroutine takes as input two double precision numbers
   * which specifies the current x and y location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_2d_exact_p      (double,double);

  /**
   * masa_eval_2d_exact_rho is a subroutine that will return
   * the value of the analytical term for the density
   * of the currently selected two dimensional masa function.
   *
   * This subroutine takes as input two double precision numbers
   * which specifies the current x and y location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_2d_exact_rho    (double,double);

  // --------------------------------
  /// \name 3D Source Terms
  // --------------------------------

  /**
   * masa_eval_3d_source_t is a subroutine that will return
   * the value of the source term for the temperature of the currently selected
   * three dimensional masa function 
   *
   * This subroutine takes as input three double precision numbers
   * which specifies the current x,y and z location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_3d_source_t  (double,double,double);

  /**
   * masa_eval_3d_source_u is a subroutine that will return
   * the value of the source term for the u component of velocity
   * for the currently selected three dimensional masa function.
   *
   * This subroutine takes as input three double precision numbers
   * which specifies the current x,y and z location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_3d_source_u  (double,double,double);

  /**
   * masa_eval_3d_source_v is a subroutine that will return
   * the value of the source term for the v component of velocity
   * for the currently selected three dimensional masa function.
   *
   * This subroutine takes as input three double precision numbers
   * which specifies the current x,y and z location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_3d_source_v  (double,double,double);

  /**
   * masa_eval_3d_source_w is a subroutine that will return
   * the value of the source term for the w component of velocity
   * for the currently selected three dimensional masa function.
   *
   * This subroutine takes as input three double precision numbers
   * which specifies the current x,y and z location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_3d_source_w  (double,double,double);

  /**
   * masa_eval_3d_source_e is a subroutine that will return
   * the value of the source term for the energy
   * of the currently selected three dimensional masa function.
   *
   * This subroutine takes as input three double precision numbers
   * which specifies the current x,y and z location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_3d_source_e  (double,double,double);

  /**
   * masa_eval_3d_source_rho is a subroutine that will return
   * the value of the source term for the density
   * of the currently selected three dimensional masa function.
   *
   * This subroutine takes as input three double precision numbers
   * which specifies the current x,y and z location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_3d_source_rho(double,double,double);
  extern double masa_eval_3d_source_rho_u(double,double,double);
  extern double masa_eval_3d_source_rho_v(double,double,double);
  extern double masa_eval_3d_source_rho_w(double,double,double);
  extern double masa_eval_3d_source_rho_e(double,double,double);

  /**
   * masa_eval_3d_exact_t is a subroutine that will return
   * the value of the analytical term for the temperature of the 
   * currently selected three dimensional masa function.
   *
   * This subroutine takes as input three double precision numbers
   * which specifies the current x,y and z location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_3d_exact_t      (double,double,double);

  /**
   * masa_eval_3d_exact_u is a subroutine that will return
   * the value of the analytical term for the u component of velocity
   * of the currently selected three dimensional masa function.
   *
   * This subroutine takes as input three double precision numbers
   * which specifies the current x,y and z location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_3d_exact_u      (double,double,double);

  /**
   * masa_eval_3d_exact_v is a subroutine that will return
   * the value of the analytical term for the v component of velocity
   * of the currently selected three dimensional masa function.
   *
   * This subroutine takes as input three double precision numbers
   * which specifies the current x,y and z location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_3d_exact_v      (double,double,double);

  /**
   * masa_eval_3d_exact_w is a subroutine that will return
   * the value of the analytical term for the w component of velocity
   * of the currently selected three dimensional masa function.
   *
   * This subroutine takes as input three double precision numbers
   * which specifies the current x,y and z location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_3d_exact_w      (double,double,double);

  /**
   * masa_eval_3d_exact_p is a subroutine that will return
   * the value of the analytical term for the pressure
   * of the currently selected three dimensional masa function.
   *
   * This subroutine takes as input three double precision numbers
   * which specifies the current x,y and z location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_3d_exact_p      (double,double,double);

  /**
   * masa_eval_3d_exact_p is a subroutine that will return
   * the value of the analytical term for the density
   * of the currently selected three dimensional masa function.
   *
   * This subroutine takes as input three double precision numbers
   * which specifies the current x,y and z location of the source term.
   * 
   * Subroutine returns a double of the currently held value
   * of the specified variable. 
   */
  extern double masa_eval_3d_exact_rho    (double,double,double);

  // --------------------------------
  // gradient of analytical solution
  // --------------------------------
  extern double masa_eval_grad_1d(int,double);
  extern double masa_eval_grad_2d(int,double,double);
  extern double masa_eval_grad_3d(int,double,double,double);

  // --------------------------------
  // old masa core functions (to be called by user)
  // --------------------------------
  
  /**
   * masa_get_name:
   *
   * Subroutine will return a string with the current manufactured solution
   * name.
   * 
   */       
  extern int masa_get_name(const char*);
  extern int masa_get_dimension(int*);

  /**
   * masa_get_name:
   *
   * Subroutine will output the currently selected manufactured
   * solution class' parameter names and values to standard output
   * 
   */       
  extern int masa_display_param();

  /**
   * masa_sanity_check
   *
   * Subroutine that will check that all parameters for
   * the currently selected masa manufactured class have been
   * initalized to some value.
   * 
   * Subroutine returns an integer 0 on success.
   */
  extern int masa_sanity_check();

#ifdef __cplusplus
}
#endif

